# プロジェクトの意義

技術記事を収集し、読む習慣を少しでも効率化するためのプロジェクト。

# 解決策

技術記事をタブで開き、並べておくことが多い。
APIとDBを用意しておき、記事を保存できるようにする。
タブを複数選択して一括で記事とタイトルをAPIに送信する拡張機能を実装して、記事を保存する。
別途記事を読むためのUIを用意して運用を始める。

# 設計

- API
    - HonoとDrizzleを利用
    - Biomeで静的解析
    - UnitテストはVitest
    - DIを意識した実装
- Chrome拡張機能
    - Javascriptで実装
    - テストしない
    - シンプルな選択中タブを固定で定義済みのAPIエンドポイントに送信する
    - ライブラリを利用しない
- UI
    - Nextjsで実装
    - Biomeで静的解析
    - UnitテストはVitest
    - Cloudfalre workersにデプロイ
- GitHub Actions
    - PR時にBiomeで静的解析
    - PR時にUnitテストを実行
    - depenabotで依存関係の更新を自動化

# ルール

- UIとAPIは単体テストを書きやすい設計を意識する
- 実装後は必ずディレクトリ内で`mpm run format`を実行しフォーマットする
- 実装後は必ずディレクトリ内で`mpm run test`を実行し静的解析を行う
- APIのテストカバレッジは90%以上を保つ
- 新規追加した仕様やメモは必ず、`.cline`以下に適切なファイル名のマークダウンを作成し記述する
- .cline以下の仕様を確認した上で実装を行うこと

## .clineディレクトリ構造と内容

### /implementation
コードの実装基準とベストプラクティスを格納
- `coding-standards.md`: 共通のコーディング基準、各コンポーネントの実装基準、テスト要件を記載

### /api
API関連の仕様とガイドラインを格納
- `specifications.md`: エンドポイント仕様、データベース設計、実装のベストプラクティスを記載

## 仕様参照のルール
1. 実装開始前に必ず関連する.cline以下のドキュメントを確認
2. APIの実装時は`.cline/api`以下の仕様を必ず参照
3. 新しい実装パターンや重要な設計判断は適切なディレクトリに文書化
