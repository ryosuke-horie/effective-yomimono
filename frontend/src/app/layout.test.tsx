/**
 * RootLayoutコンポーネントのテスト
 * アプリケーション全体のレイアウト、メタデータ、プロバイダー構成をテスト
 */
import { render } from "@testing-library/react";
import { describe, expect, it, vi } from "vitest";
import RootLayout, { metadata } from "./layout";

// Next.js関連モック
vi.mock("next/font/local", () => ({
	default: () => ({
		variable: "--font-geist-mock",
		className: "mock-font-class",
	}),
}));

// モック
vi.mock("@/components/Header", () => ({
	Header: () => <header data-testid="header">Header</header>,
}));

vi.mock("@/providers/QueryProvider", () => ({
	QueryProvider: ({ children }: { children: React.ReactNode }) => (
		<div data-testid="query-provider">{children}</div>
	),
}));

describe("RootLayout", () => {
	it("メタデータが正しく設定されている", () => {
		expect(metadata.title).toBe("Effective Yomimono");
		expect(metadata.description).toBe("Generated by create next app");
	});

	it("コンポーネントが正しくレンダリングされる", () => {
		const testChildren = <div data-testid="test-children">Test Content</div>;
		const { getByTestId } = render(<RootLayout>{testChildren}</RootLayout>);

		// 子要素が正しくレンダリングされていることを確認
		expect(getByTestId("test-children")).toBeInTheDocument();
		expect(getByTestId("test-children")).toHaveTextContent("Test Content");
	});

	it("QueryProviderでラップされている", () => {
		const testChildren = <div data-testid="test-children">Test Content</div>;
		const { getByTestId } = render(<RootLayout>{testChildren}</RootLayout>);

		expect(getByTestId("query-provider")).toBeInTheDocument();
	});

	it("Headerコンポーネントがレンダリングされる", () => {
		const testChildren = <div data-testid="test-children">Test Content</div>;
		const { getByTestId } = render(<RootLayout>{testChildren}</RootLayout>);

		expect(getByTestId("header")).toBeInTheDocument();
	});

	it("childrenがpt-16クラスでラップされている", () => {
		const testChildren = <div data-testid="test-children">Test Content</div>;
		const { getByTestId } = render(<RootLayout>{testChildren}</RootLayout>);

		const contentWrapper = getByTestId("test-children").parentElement;
		expect(contentWrapper).toHaveClass("pt-16");
	});

	it("正しい構造でchildrenがレンダリングされる", () => {
		const testChildren = <div data-testid="test-children">Test Content</div>;
		const { getByTestId } = render(<RootLayout>{testChildren}</RootLayout>);

		// プロバイダー内にHeader、content wrapperが正しい順序で配置されている
		const queryProvider = getByTestId("query-provider");
		const header = getByTestId("header");
		const children = getByTestId("test-children");

		expect(queryProvider).toContainElement(header);
		expect(queryProvider).toContainElement(children);
	});
});
